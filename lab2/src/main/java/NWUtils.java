import java.util.*;
import java.util.function.Predicate;
import java.util.stream.Stream;

public class NWUtils {

    private static final Character[] NUCLEOTIDE_ALPH = {
            'A', 'T', 'G', 'C', 'S', 'W', 'R', 'Y', 'K', 'M', 'B', 'V', 'H', 'D', 'N'
    };

    private static final Character[] AMINO_ACIDS_ALPH = {
            'A', 'R', 'N', 'D', 'C', 'Q', 'E', 'G', 'H', 'I', 'L', 'K', 'M', 'F', 'P', 'S', 'T', 'W', 'Y', 'V', 'B', 'Z', 'X'
    };

    private static final Set<Character> AC_CH_SET = new HashSet<>(Arrays.asList(AMINO_ACIDS_ALPH));
    private static final Set<Character> N_CH_SET = new HashSet<>(Arrays.asList(NUCLEOTIDE_ALPH));

    private static final Map<Character, Integer> AC_CH_TO_IDX;
    private static final Map<Character, Integer> N_CH_TO_IDX;
    static {
        AC_CH_TO_IDX = new HashMap<>();
        N_CH_TO_IDX = new HashMap<>();

        for (int i = 0; i < AMINO_ACIDS_ALPH.length; i++) {
            AC_CH_TO_IDX.put(AMINO_ACIDS_ALPH[i], i);
        }

        for (int i = 0; i < NUCLEOTIDE_ALPH.length; i++) {
            N_CH_TO_IDX.put(NUCLEOTIDE_ALPH[i], i);
        }
    }

    private static final int[][] DNA_FULL_MATRIX = {
/*          A   T   G   C   S   W   R   Y   K   M   B   V   H   D   N          */
/* A */  {  5, -4, -4, -4, -4,  1,  1, -4, -4,  1, -4, -1, -1, -1, -2 },
/* T */  { -4,  5, -4, -4, -4,  1, -4,  1,  1, -4, -1, -4, -1, -1, -2 },
/* G */  { -4, -4,  5, -4,  1, -4,  1, -4,  1, -4, -1, -1, -4, -1, -2 },
/* C */  { -4, -4, -4,  5,  1, -4, -4,  1, -4,  1, -1, -1, -1, -4, -2 },
/* S */  { -4, -4,  1,  1, -1, -4, -2, -2, -2, -2, -1, -1, -3, -3, -1 },
/* W */  {  1,  1, -4, -4, -4, -1, -2, -2, -2, -2, -3, -3, -1, -1, -1 },
/* R */  {  1, -4,  1, -4, -2, -2, -1, -4, -2, -2, -3, -1, -3, -1, -1 },
/* Y */  { -4,  1, -4,  1, -2, -2, -4, -1, -2, -2, -1, -3, -1, -3, -1 },
/* K */  { -4,  1,  1, -4, -2, -2, -2, -2, -1, -4, -1, -3, -3, -1, -1 },
/* M */  {  1, -4, -4,  1, -2, -2, -2, -2, -4, -1, -3, -1, -1, -3, -1 },
/* B */  { -4, -1, -1, -1, -1, -3, -3, -1, -1, -3, -1, -2, -2, -2, -1 },
/* V */  { -1, -4, -1, -1, -1, -3, -1, -3, -3, -1, -2, -1, -2, -2, -1 },
/* H */  { -1, -1, -4, -1, -3, -1, -3, -1, -3, -1, -2, -2, -1, -2, -1 },
/* D */  { -1, -1, -1, -4, -3, -1, -1, -3, -1, -3, -2, -2, -2, -1, -1 },
/* N */  { -2, -2, -2, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
    };

    private static final int[][] BLOSUM62_MATRIX = {
/*         A   R   N   D   C   Q   E   G   H   I   L   K   M   F   P   S   T   W   Y   V   B   Z   X   *       */
/* A */  { 4, -1, -2, -2,  0, -1, -1,  0, -2, -1, -1, -1, -1, -2, -1,  1,  0, -3, -2,  0, -2, -1,  0, -4},
/* R */  {-1,  5,  0, -2, -3,  1,  0, -2,  0, -3, -2,  2, -1, -3, -2, -1, -1, -3, -2, -3, -1,  0, -1, -4},
/* N */  {-2,  0,  6,  1, -3,  0,  0,  0,  1, -3, -3,  0, -2, -3, -2,  1,  0, -4, -2, -3,  3,  0, -1, -4},
/* D */  {-2, -2,  1,  6, -3,  0,  2, -1, -1, -3, -4, -1, -3, -3, -1,  0, -1, -4, -3, -3,  4,  1, -1, -4},
/* C */  { 0, -3, -3, -3,  9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1, -3, -3, -2, -4},
/* Q */  {-1,  1,  0,  0, -3,  5,  2, -2,  0, -3, -2,  1,  0, -3, -1,  0, -1, -2, -1, -2,  0,  3, -1, -4},
/* E */  {-1,  0,  0,  2, -4,  2,  5, -2,  0, -3, -3,  1, -2, -3, -1,  0, -1, -3, -2, -2,  1,  4, -1, -4},
/* G */  { 0, -2,  0, -1, -3, -2, -2,  6, -2, -4, -4, -2, -3, -3, -2,  0, -2, -2, -3, -3, -1, -2, -1, -4},
/* H */  {-2,  0,  1, -1, -3,  0,  0, -2,  8, -3, -3, -1, -2, -1, -2, -1, -2, -2,  2, -3,  0,  0, -1, -4},
/* I */  {-1, -3, -3, -3, -1, -3, -3, -4, -3,  4,  2, -3,  1,  0, -3, -2, -1, -3, -1,  3, -3, -3, -1, -4},
/* L */  {-1, -2, -3, -4, -1, -2, -3, -4, -3,  2,  4, -2,  2,  0, -3, -2, -1, -2, -1,  1, -4, -3, -1, -4},
/* K */  {-1,  2,  0, -1, -3,  1,  1, -2, -1, -3, -2,  5, -1, -3, -1,  0, -1, -3, -2, -2,  0,  1, -1, -4},
/* M */  {-1, -1, -2, -3, -1,  0, -2, -3, -2,  1,  2, -1,  5,  0, -2, -1, -1, -1, -1,  1, -3, -1, -1, -4},
/* F */  {-2, -3, -3, -3, -2, -3, -3, -3, -1,  0,  0, -3,  0,  6, -4, -2, -2,  1,  3, -1, -3, -3, -1, -4},
/* P */  {-1, -2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4,  7, -1, -1, -4, -3, -2, -2, -1, -2, -4},
/* S */  { 1, -1,  1,  0, -1,  0,  0,  0, -1, -2, -2,  0, -1, -2, -1,  4,  1, -3, -2, -2,  0,  0,  0, -4},
/* T */  { 0, -1,  0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1,  1,  5, -2, -2,  0, -1, -1,  0, -4},
/* W */  {-3, -3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1,  1, -4, -3, -2, 11,  2, -3, -4, -3, -2, -4},
/* Y */  {-2, -2, -2, -3, -2, -1, -2, -3,  2, -1, -1, -2, -1,  3, -3, -2, -2,  2,  7, -1, -3, -2, -1, -4},
/* V */  { 0, -3, -3, -3, -1, -2, -2, -3, -3,  3,  1, -2,  1, -1, -2, -2,  0, -3, -1,  4, -3, -2, -1, -4},
/* B */  {-2, -1,  3,  4, -3,  0,  1, -1,  0, -3, -4,  0, -3, -3, -2,  0, -1, -4, -3, -3,  4,  1, -1, -4},
/* Z */  {-1,  0,  0,  1, -3,  3,  4, -2,  0, -3, -3,  1, -1, -3, -1,  0, -1, -3, -2, -2,  1,  4, -1, -4},
/* X */  { 0, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2,  0,  0, -2, -1, -1, -1, -1, -1, -4},
/* * */  {-4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,  1},
    };

    public static int dnaFull(char a, char b) {
        int i = N_CH_TO_IDX.get(a), j = N_CH_TO_IDX.get(b);
        return DNA_FULL_MATRIX[i][j];
    }

    public static int blosum62(char a, char b) {
        int i = AC_CH_TO_IDX.get(a),
                j = AC_CH_TO_IDX.get(b);
        return BLOSUM62_MATRIX[i][j];
    }

    public static boolean isAminoAcidsSequence(String seq) {
        return seq.chars().allMatch(ch -> AC_CH_SET.contains((char)ch));
    }

    public static boolean isNucleotideSequence(String seq) {
        return seq.chars().allMatch(ch -> N_CH_SET.contains((char)ch));
    }
}
